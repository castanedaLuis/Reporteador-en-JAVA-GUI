/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package reporteador_aztecaplus;

import Conexion.Conexion;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import static java.time.temporal.TemporalQueries.zone;
import javax.swing.JOptionPane;

/**
 *
 * @author Jose Luis Casta√±eda
 */
public class ventanaSecundaria extends javax.swing.JFrame {

    /**
     * Creates new form ventanaSecundaria
     */
    public ventanaSecundaria() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        boton_reporte = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        filtro2 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        area = new javax.swing.JTextArea();
        filtro3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel1.setText("Reporteador de cuentas pendientes de nuestros fletes");

        boton_reporte.setBackground(new java.awt.Color(51, 255, 255));
        boton_reporte.setText("Realizar Reporte");
        boton_reporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton_reporteActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Filtrar po:");

        filtro2.setBackground(new java.awt.Color(102, 204, 255));
        filtro2.setEditable(true);
        filtro2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cliente", "Destino", "Origen", "Todos" }));
        filtro2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filtro2ItemStateChanged(evt);
            }
        });
        filtro2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtro2ActionPerformed(evt);
            }
        });

        area.setColumns(20);
        area.setRows(5);
        jScrollPane1.setViewportView(area);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Dato");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(32, 32, 32)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(filtro2, 0, 146, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(17, 17, 17)
                                    .addComponent(boton_reporte))
                                .addComponent(filtro3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(filtro2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(2, 2, 2)
                        .addComponent(filtro3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(boton_reporte, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filtro2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filtro2ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_filtro2ItemStateChanged

    private void filtro2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtro2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filtro2ActionPerformed

    private void boton_reporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton_reporteActionPerformed
        // TODO add your handling code here:
    area.setText("");    
    MstrarResultado();


    }//GEN-LAST:event_boton_reporteActionPerformed

public void MstrarResultado()
{
    float costo;
    String seleccionado = selecionarFiltro();

    if( filtro3.getText().isEmpty()==false || seleccionado == "Todos")
        {
            
            int aux = 0;
            if(seleccionado == "Cliente") 
            {
                aux = 1;
            }else if(seleccionado == "Destino")
                {
                    aux = 2;
                }
                else if(seleccionado == "Origen")
                {
                aux = 3;
                }
                else
                {
                aux = 4;

                }
            System.out.print(aux);

        //Hacemos el filtado
        String err, result, result2;
        String sql, sql2, sql3;
        String palabra = filtro3.getText().toString();
        String name_cliente="",last_name="",direction="",RFC="",RS="";
        int id_destination;
    

        //Conexion a la base de datos
        Conexion conectar = new Conexion("reporteador");
        try{
            conectar.Conectar();
        }catch(SQLException |ClassNotFoundException ex){
        }
        PreparedStatement ps = null;
        PreparedStatement ps2 = null;
        PreparedStatement ps3 = null;


        switch (aux)
        {
            case 1:
                    System.out.println("fILTRADO POR CLIENTE");
                    sql="SELECT id,RS,RFC,direction,name, last_name FROM client WHERE name='"+palabra+"'";
                    try
                    {
                            ps = conectar.Conectar().prepareStatement(sql);
                            ResultSet rs = ps.executeQuery(sql);
                            DateTimeFormatter hora = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");

                            while(rs.next())
                            {

                                Integer id = rs.getInt("id");
                                name_cliente = rs.getString("name");
                                last_name = rs.getString("last_name");
                                 direction = rs.getString("direction");
                                 RS = rs.getString("RS");
                                 RFC = rs.getString("RFC");

                                //result = rs.getString(1);
                                sql2="SELECT * FROM freight WHERE id_cliente = '"+id+"'";    
                                ps2 = conectar.Conectar().prepareStatement(sql2);
                                ResultSet rs2 = ps2.executeQuery(sql2);


                                while(rs2.next())
                                {

                                    //result2 = rs2.getString(1);

                                    //Sacando los datos de los SELECT
                                    Integer id_flete = rs2.getInt("id");
                                    String origen = rs2.getString("origen");
                                    Integer id_destino = rs2.getInt("id_destination");
                                    float distance = rs2.getFloat("distance");
                                    float carga = rs2.getFloat("carga");
                                    float peso = rs2.getFloat("weight");
                                    Boolean redondo = rs2.getBoolean("Redondo");
                                    String fecha = rs2.getString("date");
                                    String destino_update = "";

                                    if(id_destino == 1)
                                    {
                                    destino_update = "Puebla";
                                    }else if(id_destino == 2)
                                    {
                                    destino_update = "Veracruz";
                                    }else if(id_destino == 3)
                                    {
                                    destino_update = "DF";
                                    }else if(id_destino == 4)
                                    {
                                    destino_update = "Tlaxcala";
                                    }

                                    //Sacando el costo del flete
                                    costo = costoFlete(distance,carga,peso,redondo);

                                    //Realizando el reporte
                                    String encabezado ="\n Reporte Filtrado por Cliente "+"el dia: "+hora.format(LocalDateTime.now());
                                    area.append(encabezado+"\n");
                                    area.append("Nombre: "+name_cliente+" "+last_name+"\n");
                                    area.append("RFC: "+RFC+"\n");
                                    area.append("Rason Social: "+RS+"\n");
                                    area.append("Direccion: "+direction+"\n");
                                    area.append("Id del flete: "+id_flete+"\n");
                                    area.append("Feha de pedido: "+fecha+"\n");
                                    area.append("Origen: "+origen+"\n");
                                    area.append("Destino: "+id_destino+" - "+destino_update+"\n");
                                    area.append("Distancia: "+distance+" KM"+"\n");
                                    area.append("Carga: "+carga+"\n");
                                    area.append("Peso: "+peso+" Kg"+"\n");
                                    area.append("Redondo: "+redondo+"\n");
                                    area.append("-----------------------------------");

                                    area.append("Costo: $"+costo);
                                 

                                }
                            }

                    }catch(Exception e)
                    {
                                JOptionPane.showMessageDialog(null,"Error"+e);
                    }
                    conectar.Desconectar();
                    break;
            case 2:
                    System.out.println("fILTRADO POR DESTINO");
                    sql="SELECT id, name FROM destinations WHERE name='"+palabra+"'";
                    
                    try
                    {

                            ps = conectar.Conectar().prepareStatement(sql);
                            ResultSet rs = ps.executeQuery(sql);
                            DateTimeFormatter hora = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");

                            while(rs.next())
                            {

                                Integer id_destino = rs.getInt("id");
                                String name_destino = rs.getString("name");


                                //result = rs.getString(1);

                                sql2="SELECT * FROM freight WHERE id_destination = '"+id_destino+"'";    
                                ps2 = conectar.Conectar().prepareStatement(sql2);
                                ResultSet rs2 = ps2.executeQuery(sql2);


                                while(rs2.next())
                                {

                                    //result2 = rs2.getString(1);

                                    //Sacando los datos de los SELECT
                                    Integer id_cliente = rs2.getInt("id_cliente");
                                    Integer id_flete = rs2.getInt("id");
                                    String origen = rs2.getString("origen");
                                    //Integer id_destino = rs2.getInt("id_destination");
                                    float distance = rs2.getFloat("distance");
                                    float carga = rs2.getFloat("carga");
                                    float peso = rs2.getFloat("weight");
                                    Boolean redondo = rs2.getBoolean("Redondo");
                                    String fecha = rs2.getString("date");
                                    String destino_update = "";

                                    if(id_destino == 1)
                                    {
                                    destino_update = "Puebla";
                                    }else if(id_destino == 2)
                                    {
                                    destino_update = "Veracruz";
                                    }else if(id_destino == 3)
                                    {
                                    destino_update = "DF";
                                    }else if(id_destino == 4)
                                    {
                                    destino_update = "Tlaxcala";
                                    }

                                    sql3="SELECT RS,RFC,direction,name, last_name FROM client WHERE id='"+id_cliente+"'";
                                     //Para sacar Los datos del cliente
                                        
                                            ps3 = conectar.Conectar().prepareStatement(sql3);
                                            ResultSet rs3 = ps3.executeQuery(sql3);

                                            while(rs3.next())
                                            {
                                                 direction = rs3.getString("direction");
                                                 RS = rs3.getString("RS");
                                                 RFC = rs3.getString("RFC");
                                                 name_cliente = rs3.getString("name");
                                                 last_name = rs3.getString("last_name");
                                            }

                                    //Sacando el costo del flete
                                    costo = costoFlete(distance,carga,peso,redondo);

                                    //Realizando el reporte
                                    String encabezado ="\n Reporte Filtrado por Cliente "+"el dia: "+hora.format(LocalDateTime.now());
                                    area.append(encabezado+"\n");
                                    area.append("Nombre: "+name_cliente+" "+name_cliente+"\n");
                                    area.append("RFC: "+RFC+"\n");
                                    area.append("Rason Social: "+RS+"\n");
                                    area.append("Direccion: "+direction+"\n");
                                    area.append("Id del flete: "+id_flete+"\n");
                                    area.append("Feha de pedido: "+fecha+"\n");
                                    area.append("Origen: "+origen+"\n");
                                    area.append("Destino: "+id_destino+" - "+destino_update+"\n");
                                    area.append("Distancia: "+distance+" KM"+"\n");
                                    area.append("Carga: "+carga+"\n");
                                    area.append("Peso: "+peso+" Kg"+"\n");
                                    area.append("Redondo: "+redondo+"\n");
                                    area.append("-----------------------------------");

                                    area.append("Costo: $"+costo);
                  
                                }

                            }
                       
                    rs.close();
                    ps.close();
                    }catch(Exception e)
                    {
                                JOptionPane.showMessageDialog(null,"Error"+e);
                    }
                    conectar.Desconectar();
                    break;
            case 3: 
                    System.out.println("fILTRADO POR ORIGEN");
                    sql="SELECT id,id_cliente,id_destination,distance,carga,weight,Redondo,date,origen  FROM freight WHERE origen='"+palabra+"'";
                    
                    try
                    {

                            ps = conectar.Conectar().prepareStatement(sql);
                            ResultSet rs = ps.executeQuery(sql);
                            DateTimeFormatter hora = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");

                            while(rs.next())
                            {

                                Integer id_flete = rs.getInt("id");
                                Integer id_cliente = rs.getInt("id_cliente");
                                id_destination = rs.getInt("id_destination");
                                float distance = rs.getFloat("distance");
                                float carga = rs.getFloat("carga");
                                float weight = rs.getFloat("weight");
                                boolean redondo = rs.getBoolean("Redondo");
                                String origen = rs.getString("origen");
                                String fecha = rs.getString("date");

           

                                sql2="SELECT RS,RFC,direction,name, last_name FROM client WHERE id='"+id_cliente+"'";  
                                ps2 = conectar.Conectar().prepareStatement(sql2);
                                ResultSet rs2 = ps2.executeQuery(sql2);


                                while(rs2.next())
                                {


                                    //Sacando los datos de los SELECT
                                    direction = rs2.getString("direction");
                                    RS = rs2.getString("RS");
                                    RFC = rs2.getString("RFC");
                                    name_cliente = rs2.getString("name");
                                    last_name = rs2.getString("last_name");
                                    String destino_update = "";

                                    if(id_destination == 1)
                                    {
                                    destino_update = "Puebla";
                                    }else if(id_destination == 2)
                                    {
                                    destino_update = "Veracruz";
                                    }else if(id_destination == 3)
                                    {
                                    destino_update = "DF";
                                    }else if(id_destination == 4)
                                    {
                                    destino_update = "Tlaxcala";
                                    }

                                     //Sacando el costo del flete
                                    costo = costoFlete(distance,carga,weight,redondo);
                                

                                    //Realizando el reporte
                                    String encabezado ="\n Reporte Filtrado por Cliente "+"el dia: "+hora.format(LocalDateTime.now());
                                    area.append(encabezado+"\n");
                                    area.append("Nombre: "+name_cliente+" "+name_cliente+"\n");
                                    area.append("RFC: "+RFC+"\n");
                                    area.append("Rason Social: "+RS+"\n");
                                    area.append("Direccion: "+direction+"\n");
                                    area.append("Id del flete: "+id_flete+"\n");
                                    area.append("Feha de pedido: "+fecha+"\n");
                                    area.append("Origen: "+origen+"\n");
                                    area.append("Destino: "+id_destination+" - "+destino_update+"\n");
                                    area.append("Distancia: "+distance+" KM"+"\n");
                                    area.append("Carga: "+carga+"\n");
                                    area.append("Peso: "+weight+" Kg"+"\n");
                                    area.append("Redondo: "+redondo+"\n");
                                    area.append("-----------------------------------");

                                    area.append("Costo: $"+costo);

                                }

                            }

                                 

                    }catch(Exception e)
                    {
                                JOptionPane.showMessageDialog(null,"Error"+e);
                    }
                    conectar.Desconectar();
                    break;
            case 4:
                    System.out.println("SIN FILTRO");
                    sql="SELECT id,id_cliente,id_destination,distance,carga,weight,Redondo,date,origen  FROM freight";
                    
                    try
                    {

                            ps = conectar.Conectar().prepareStatement(sql);
                            ResultSet rs = ps.executeQuery(sql);
                            DateTimeFormatter hora = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm:ss");

                            while(rs.next())
                            {

                                Integer id_flete = rs.getInt("id");
                                Integer id_cliente = rs.getInt("id_cliente");
                                id_destination = rs.getInt("id_destination");
                                float distance = rs.getFloat("distance");
                                float carga = rs.getFloat("carga");
                                float weight = rs.getFloat("weight");
                                boolean redondo = rs.getBoolean("Redondo");
                                String origen = rs.getString("origen");
                                String fecha = rs.getString("date");

           

                                sql2="SELECT RS,RFC,direction,name, last_name FROM client WHERE id='"+id_cliente+"'";  
                                ps2 = conectar.Conectar().prepareStatement(sql2);
                                ResultSet rs2 = ps2.executeQuery(sql2);


                                while(rs2.next())
                                {


                                    //Sacando los datos de los SELECT
                                    direction = rs2.getString("direction");
                                    RS = rs2.getString("RS");
                                    RFC = rs2.getString("RFC");
                                    name_cliente = rs2.getString("name");
                                    last_name = rs2.getString("last_name");
                                    String destino_update = "";

                                    if(id_destination == 1)
                                    {
                                    destino_update = "Puebla";
                                    }else if(id_destination == 2)
                                    {
                                    destino_update = "Veracruz";
                                    }else if(id_destination == 3)
                                    {
                                    destino_update = "DF";
                                    }else if(id_destination == 4)
                                    {
                                    destino_update = "Tlaxcala";
                                    }

                                    //Sacando el costo del flete
                                    costo = costoFlete(distance,carga,weight,redondo);

                                    //Realizando el reporte
                                    String encabezado ="\n Reporte Filtrado por Cliente "+"el dia: "+hora.format(LocalDateTime.now());
                                    area.append(encabezado+"\n");
                                    area.append("Nombre: "+name_cliente+" "+name_cliente+"\n");
                                    area.append("RFC: "+RFC+"\n");
                                    area.append("Rason Social: "+RS+"\n");
                                    area.append("Direccion: "+direction+"\n");
                                    area.append("Id del flete: "+id_flete+"\n");
                                    area.append("Feha de pedido: "+fecha+"\n");
                                    area.append("Origen: "+origen+"\n");
                                    area.append("Destino: "+id_destination+" - "+destino_update+"\n");
                                    area.append("Distancia: "+distance+" KM"+"\n");
                                    area.append("Carga: "+carga+"\n");
                                    area.append("Peso: "+weight+" Kg"+"\n");
                                    area.append("Redondo: "+redondo+"\n");
                                    area.append("-----------------------------------");

                                    area.append("Costo: $"+costo);

                                }
                            }
                                    
                    }catch(Exception e)
                    {
                                JOptionPane.showMessageDialog(null,"Error"+e);
                    }
                    //Cerramos la conexion a la base de datos
                    conectar.Desconectar();
                    break;
            default: err = "ERROR AL HACER UNA CONSULTA";
                     break;
        }

        }else
        {
        JOptionPane.showMessageDialog(null,"Ingrese el DATO del CLENTE | ORIGEN | DESTINO");
        }

area.setEditable(false);
       
    
}

    public float costoFlete(float distancia, float volumen, float peso, boolean redondo)
    {
        float descuento = (float) 0.10;
        float incremento = (float) 0.20;
        float costo;
        costo = distancia * volumen *10;
        if(peso > 40)
        {
            costo = costo + (costo*incremento);
        }
        if(redondo == true)
        {
        costo = costo - (costo*descuento);
        }

        return costo;
    }



    public String selecionarFiltro()
    {
        String filtro = (String) filtro2.getSelectedItem();
        System.out.println(filtro);
        return filtro;
    }


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventanaSecundaria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventanaSecundaria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventanaSecundaria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventanaSecundaria.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventanaSecundaria().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea area;
    private javax.swing.JButton boton_reporte;
    private javax.swing.JComboBox<String> filtro2;
    private javax.swing.JTextField filtro3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
